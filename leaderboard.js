// –°–∏—Å—Ç–µ–º–∞ —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
class Leaderboard {
    constructor() {
        this.currentTab = 'total';
        this.init();
    }

    init() {
        this.bindEvents();
    }

    bindEvents() {
        document.getElementById('closeLeaderboard').addEventListener('click', () => this.hide());
        document.getElementById('leaderboardModal').addEventListener('click', (e) => {
            if (e.target.id === 'leaderboardModal') this.hide();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∫–ª–∞–¥–æ–∫
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                this.switchTab(e.target.dataset.tab);
            });
        });
    }

    show() {
        document.getElementById('leaderboardModal').style.display = 'flex';
        this.updateLeaderboard();
    }

    hide() {
        document.getElementById('leaderboardModal').style.display = 'none';
    }

    switchTab(tab) {
        this.currentTab = tab;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –≤–∫–ª–∞–¥–∫–∏
        document.querySelectorAll('.tab-btn').forEach(btn => {
            btn.classList.toggle('active', btn.dataset.tab === tab);
        });

        this.updateLeaderboard();
    }

    updateLeaderboard() {
        const users = authSystem.users;
        const currentUser = authSystem.getCurrentUser();
        const leaderboardList = document.getElementById('leaderboardList');

        let sortedUsers = [];

        switch (this.currentTab) {
            case 'total':
                sortedUsers = Object.values(users).sort((a, b) => b.totalEarned - a.totalEarned);
                break;
            case 'click':
                sortedUsers = Object.values(users).sort((a, b) => b.clickPower - a.clickPower);
                break;
            case 'income':
                sortedUsers = Object.values(users).sort((a, b) => b.passiveIncome - a.passiveIncome);
                break;
        }

        leaderboardList.innerHTML = '';

        if (sortedUsers.length === 0) {
            leaderboardList.innerHTML = `
                <div class="no-players">
                    <div class="no-players-icon">üåå</div>
                    <h3>–ü–æ–∫–∞ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤</h3>
                    <p>–ë—É–¥—å—Ç–µ –ø–µ—Ä–≤—ã–º –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!</p>
                </div>
            `;
            return;
        }

        sortedUsers.slice(0, 50).forEach((user, index) => {
            const isCurrentUser = currentUser && user.username === currentUser.username;
            const userElement = document.createElement('div');
            userElement.className = `leaderboard-item ${isCurrentUser ? 'current-user' : ''}`;

            let value = '';
            switch (this.currentTab) {
                case 'total':
                    value = Math.floor(user.totalEarned).toLocaleString() + ' ü™ô';
                    break;
                case 'click':
                    value = user.clickPower + ' üëÜ';
                    break;
                case 'income':
                    value = Math.floor(user.passiveIncome).toLocaleString() + ' ‚ö°/—Å–µ–∫';
                    break;
            }

            userElement.innerHTML = `
                <div class="leaderboard-rank">
                    <span class="rank-number">${index + 1}</span>
                    ${this.getRankIcon(index + 1)}
                </div>
                <div class="leaderboard-user">
                    <span class="user-avatar">${this.getUserAvatar(user.totalEarned)}</span>
                    <div class="user-info">
                        <span class="username">${user.username}</span>
                        <span class="user-stats">${this.getUserRank(user.totalEarned)}</span>
                    </div>
                </div>
                <div class="leaderboard-value">
                    ${value}
                </div>
            `;

            leaderboardList.appendChild(userElement);
        });
    }

    getRankIcon(rank) {
        if (rank === 1) return '<span class="rank-icon">ü•á</span>';
        if (rank === 2) return '<span class="rank-icon">ü•à</span>';
        if (rank === 3) return '<span class="rank-icon">ü•â</span>';
        return '';
    }

    getUserAvatar(totalEarned) {
        if (totalEarned >= 1000000) return 'üëë';
        if (totalEarned >= 100000) return 'üöÄ';
        if (totalEarned >= 10000) return '‚≠ê';
        if (totalEarned >= 1000) return 'üåç';
        return 'üë®‚ÄçüöÄ';
    }

    getUserRank(totalEarned) {
        if (totalEarned >= 1000000) return '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –ò–º–ø–µ—Ä–∞—Ç–æ—Ä';
        if (totalEarned >= 100000) return '–ó–≤–µ–∑–¥–Ω—ã–π –ú–∞–≥–Ω–∞—Ç';
        if (totalEarned >= 10000) return '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ë–∞—Ä–æ–Ω';
        if (totalEarned >= 1000) return '–ü–ª–∞–Ω–µ—Ç–∞—Ä–Ω—ã–π –î–∏—Ä–µ–∫—Ç–æ—Ä';
        if (totalEarned >= 100) return '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ö–∞–ø–∏—Ç–∞–Ω';
        return '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –ù–æ–≤–∏—á–æ–∫';
    }

    updateUserInLeaderboard(userData) {
        if (authSystem.users[userData.username]) {
            Object.assign(authSystem.users[userData.username], userData);
            authSystem.saveUsers();
            this.updateLeaderboard();
        }
    }
}

// –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤ (—É–¥–∞–ª–∏—Ç–µ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
function addDemoPlayers() {
    const demoPlayers = [
        { username: "–ö–æ—Å–º–æ–Ω–∞–≤—Ç_–ü—Ä–æ", totalEarned: 1542670, clickPower: 45, passiveIncome: 8920 },
        { username: "–ì–∞–ª–∞–∫—Ç–∏–∫–∞_42", totalEarned: 892350, clickPower: 32, passiveIncome: 5670 },
        { username: "–ó–≤–µ–∑–¥–Ω—ã–π_–°—Ç—Ä–∞–Ω–Ω–∏–∫", totalEarned: 567890, clickPower: 28, passiveIncome: 3450 },
        { username: "–û—Ä–±–∏—Ç–∞–ª—å–Ω—ã–π_–ú–∞–≥–Ω–∞—Ç", totalEarned: 234560, clickPower: 25, passiveIncome: 1890 },
        { username: "–ù–æ–≤–∞_–ò–º–ø–µ—Ä–∏—è", totalEarned: 123450, clickPower: 18, passiveIncome: 920 },
        { username: "–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π_–ü–∏–æ–Ω–µ—Ä", totalEarned: 87650, clickPower: 15, passiveIncome: 670 },
        { username: "–¢—É–º–∞–Ω–Ω–æ—Å—Ç—å_X", totalEarned: 54320, clickPower: 12, passiveIncome: 450 },
        { username: "–ö–≤–∞–Ω—Ç–æ–≤—ã–π_–°–ª–µ–¥–æ–ø—ã—Ç", totalEarned: 32100, clickPower: 10, passiveIncome: 290 },
        { username: "–ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è_Z", totalEarned: 18760, clickPower: 8, passiveIncome: 180 },
        { username: "–°–æ–∑–≤–µ–∑–¥–∏–µ_–ê–ª—å—Ñ–∞", totalEarned: 9560, clickPower: 6, passiveIncome: 120 }
    ];

    demoPlayers.forEach(player => {
        if (!authSystem.users[player.username]) {
            authSystem.users[player.username] = {
                id: 'demo_' + player.username,
                username: player.username,
                joinDate: new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString(),
                totalEarned: player.totalEarned,
                clickPower: player.clickPower,
                passiveIncome: player.passiveIncome,
                achievements: ['first_credit', 'hundred_credits', 'first_upgrade'],
                lastPlayed: new Date(Date.now() - Math.random() * 24 * 60 * 60 * 1000).toISOString(),
                playTime: Math.floor(Math.random() * 1000000)
            };
        }
    });
    
    authSystem.saveUsers();
}

// –í—ã–∑–æ–≤–∏—Ç–µ —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ leaderboard.js
addDemoPlayers(); // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —ç—Ç—É —Å—Ç—Ä–æ–∫—É —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –¥–µ–º–æ-–∏–≥—Ä–æ–∫–æ–≤

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–∞–±–ª–∏—Ü—ã –ª–∏–¥–µ—Ä–æ–≤
const leaderboard = new Leaderboard();
