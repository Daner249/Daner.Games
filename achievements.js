// –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
const achievements = {
    milestones: [
        {
            id: 'first_credit',
            name: '–ü–µ—Ä–≤—ã–π —à–∞–≥',
            description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–µ—Ä–≤—ã–π –∫—Ä–µ–¥–∏—Ç',
            icon: 'ü™ô',
            condition: (game) => game.totalEarned >= 1,
            unlocked: false
        },
        {
            id: 'hundred_credits',
            name: '–ù–∞—á–∏–Ω–∞—é—â–∏–π –º–∞–≥–Ω–∞—Ç',
            description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 100 –∫—Ä–µ–¥–∏—Ç–æ–≤',
            icon: 'üíØ',
            condition: (game) => game.totalEarned >= 100,
            unlocked: false
        },
        {
            id: 'thousand_credits',
            name: '–û–ø—ã—Ç–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å',
            description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 1,000 –∫—Ä–µ–¥–∏—Ç–æ–≤',
            icon: 'üí∞',
            condition: (game) => game.totalEarned >= 1000,
            unlocked: false
        },
        {
            id: 'million_credits',
            name: '–ö–æ—Å–º–∏—á–µ—Å–∫–∏–π –º–∞–≥–Ω–∞—Ç',
            description: '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å 1,000,000 –∫—Ä–µ–¥–∏—Ç–æ–≤',
            icon: 'üëë',
            condition: (game) => game.totalEarned >= 1000000,
            unlocked: false
        },
        {
            id: 'first_upgrade',
            name: '–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ä—ã–≤',
            description: '–ö—É–ø–∏—Ç—å –ø–µ—Ä–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ',
            icon: 'üõ†Ô∏è',
            condition: (game) => game.upgrades.some(u => u.owned > 0),
            unlocked: false
        },
        {
            id: 'ten_upgrades',
            name: '–ò–Ω–¥—É—Å—Ç—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è',
            description: '–ò–º–µ—Ç—å 10 —É–ª—É—á—à–µ–Ω–∏–π –≤ —Å—É–º–º–µ',
            icon: 'üè≠',
            condition: (game) => game.upgrades.reduce((sum, u) => sum + u.owned, 0) >= 10,
            unlocked: false
        },
        {
            id: 'first_planet',
            name: '–ö–æ–ª–æ–Ω–∏–∑–∞—Ç–æ—Ä',
            description: '–ö–æ–ª–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–≤—É—é –ø–ª–∞–Ω–µ—Ç—É',
            icon: 'üåç',
            condition: (game) => game.planets.some(p => p.owned),
            unlocked: false
        },
        {
            id: 'all_planets',
            name: '–ú–µ–∂–≥–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è',
            description: '–ö–æ–ª–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–ª–∞–Ω–µ—Ç—ã',
            icon: 'üåå',
            condition: (game) => game.planets.every(p => p.owned),
            unlocked: false
        },
        {
            id: 'click_power_10',
            name: '–°–∏–ª–∞ –∫–ª–∏–∫–∞',
            description: '–£–≤–µ–ª–∏—á–∏—Ç—å —Å–∏–ª—É –∫–ª–∏–∫–∞ –¥–æ 10',
            icon: 'üí™',
            condition: (game) => game.clickPower >= 10,
            unlocked: false
        },
        {
            id: 'click_power_100',
            name: '–ù–µ—É–¥–µ—Ä–∂–∏–º—ã–π',
            description: '–£–≤–µ–ª–∏—á–∏—Ç—å —Å–∏–ª—É –∫–ª–∏–∫–∞ –¥–æ 100',
            icon: '‚ö°',
            condition: (game) => game.clickPower >= 100,
            unlocked: false
        },
        {
            id: 'passive_1000',
            name: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è',
            description: '–î–æ—Å—Ç–∏—á—å –¥–æ—Ö–æ–¥–∞ 1,000 –≤ —Å–µ–∫—É–Ω–¥—É',
            icon: 'ü§ñ',
            condition: (game) => game.passiveIncome >= 1000,
            unlocked: false
        },
        {
            id: 'first_mega',
            name: '–ö–≤–∞–Ω—Ç–æ–≤—ã–π —Å–∫–∞—á–æ–∫',
            description: '–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–µ—Ä–≤–æ–µ –º–µ–≥–∞-—É–ª—É—á—à–µ–Ω–∏–µ',
            icon: 'üöÄ',
            condition: (game) => game.megaUpgrades.some(m => m.owned),
            unlocked: false
        }
    ],

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    checkAll: function(gameState) {
        let newUnlocks = 0;
        
        this.milestones.forEach(achievement => {
            if (!achievement.unlocked && achievement.condition(gameState)) {
                achievement.unlocked = true;
                newUnlocks++;
                this.showNotification(achievement);
            }
        });
        
        if (newUnlocks > 0) {
            this.updateDisplay();
        }
        
        return newUnlocks;
    },

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏
    showNotification: function(achievement) {
        const eventPanel = document.getElementById('eventMessage');
        if (eventPanel) {
            eventPanel.innerHTML = `
                <div style="color: #ffd700; font-size: 1.1em;">
                    üéâ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: <strong>${achievement.name}</strong> üéâ
                </div>
                <div style="font-size: 0.9em; margin-top: 0.5em;">${achievement.description}</div>
            `;
            eventPanel.classList.add('pulse');
            
            // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            setTimeout(() => {
                eventPanel.classList.remove('pulse');
            }, 3000);
        }
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    updateDisplay: function() {
        const container = document.getElementById('achievementsList');
        const countElement = document.getElementById('achievementsCount');
        
        if (!container) return;
        
        const unlockedCount = this.milestones.filter(a => a.unlocked).length;
        const totalCount = this.milestones.length;
        
        if (countElement) {
            countElement.textContent = `${unlockedCount}/${totalCount}`;
        }
        
        container.innerHTML = '';
        
        this.milestones.forEach(achievement => {
            const achievementElement = document.createElement('div');
            achievementElement.className = `achievement-item ${achievement.unlocked ? 'unlocked' : ''}`;
            
            // –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
            let progress = 0;
            if (achievement.condition.toString().includes('totalEarned')) {
                const target = achievement.condition.toString().match(/>= (\d+)/);
                if (target) progress = Math.min(100, (gameState.totalEarned / parseInt(target[1])) * 100);
            } else if (achievement.condition.toString().includes('clickPower')) {
                const target = achievement.condition.toString().match(/>= (\d+)/);
                if (target) progress = Math.min(100, (gameState.clickPower / parseInt(target[1])) * 100);
            } else if (achievement.condition.toString().includes('passiveIncome')) {
                const target = achievement.condition.toString().match(/>= (\d+)/);
                if (target) progress = Math.min(100, (gameState.passiveIncome / parseInt(target[1])) * 100);
            }
            
            achievementElement.innerHTML = `
                <div class="achievement-icon">${achievement.unlocked ? achievement.icon : 'üîí'}</div>
                <div class="achievement-info">
                    <div class="achievement-name">${achievement.name}</div>
                    <div class="achievement-desc">${achievement.description}</div>
                    ${!achievement.unlocked ? `
                        <div class="achievement-progress">
                            <div class="achievement-progress-bar" style="width: ${progress}%"></div>
                        </div>
                    ` : ''}
                </div>
            `;
            
            container.appendChild(achievementElement);
        });
    },

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    load: function(savedAchievements) {
        if (savedAchievements) {
            savedAchievements.forEach(savedAchievement => {
                const achievement = this.milestones.find(a => a.id === savedAchievement.id);
                if (achievement) {
                    achievement.unlocked = savedAchievement.unlocked;
                }
            });
        }
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    getSaveData: function() {
        return this.milestones.map(a => ({
            id: a.id,
            unlocked: a.unlocked
        }));
    }
};