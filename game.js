// –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
let gameState = {
    credits: 0,
    totalEarned: 0,
    passiveIncome: 0,
    clickPower: 1,
    clickPowerCost: 10,
    lastEventTime: Date.now(),
    eventCooldown: 30000, // 30 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É —Å–æ–±—ã—Ç–∏—è–º–∏

    upgrades: [
        {
            id: 1,
            name: "–°–ø—É—Ç–Ω–∏–∫",
            description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–∏—Ä–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç—ã —Å –æ—Ä–±–∏—Ç—ã",
            baseCost: 15,
            cost: 15,
            income: 2,
            owned: 0,
            image: "images/satellite.png"
        },
        {
            id: 2,
            name: "–õ—É–Ω–Ω–∞—è –ë–∞–∑–∞",
            description: "–î–æ–±—ã—á–∞ —Ä–µ–¥–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –Ω–∞ –õ—É–Ω–µ",
            baseCost: 100,
            cost: 100,
            income: 10,
            owned: 0,
            image: "images/moon-base.png"
        },
        {
            id: 3,
            name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –°—Ç–∞–Ω—Ü–∏—è",
            description: "–ù–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä –≤ –∫–æ—Å–º–æ—Å–µ",
            baseCost: 500,
            cost: 500,
            income: 50,
            owned: 0,
            image: "images/space-station.png"
        },
        {
            id: 4,
            name: "–ú–µ–∂–∑–≤–µ–∑–¥–Ω—ã–π –§–ª–æ—Ç",
            description: "–¢–æ—Ä–≥–æ–≤—ã–µ –∫–æ—Ä–∞–±–ª–∏ –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏",
            baseCost: 3000,
            cost: 3000,
            income: 200,
            owned: 0,
            image: "images/fleet.png"
        },
        {
            id: 5,
            name: "–ö–≤–∞–Ω—Ç–æ–≤—ã–π –ö–æ–º–ø—å—é—Ç–µ—Ä",
            description: "–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ—Å–º–∏—á–µ—Å–∫–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π",
            baseCost: 20000,
            cost: 20000,
            income: 1000,
            owned: 0,
            image: "images/quantum-computer.png"
        },
        {
            id: 6,
            name: "–ú–∞—à–∏–Ω–∞ –í—Ä–µ–º–µ–Ω–∏",
            description: "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–Ω–æ–º–∞–ª–∏–∏ –¥–ª—è –ø—Ä–∏–±—ã–ª–∏",
            baseCost: 100000,
            cost: 100000,
            income: 5000,
            owned: 0,
            image: "images/time-machine.png"
        }
    ],

    planets: [
        {
            id: 1,
            name: "–ú–∞—Ä—Å",
            description: "–ö–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è –ö—Ä–∞—Å–Ω–æ–π –ü–ª–∞–Ω–µ—Ç—ã",
            baseCost: 1000,
            cost: 1000,
            multiplier: 1.5,
            owned: false,
            image: "images/mars.png"
        },
        {
            id: 2,
            name: "–Æ–ø–∏—Ç–µ—Ä",
            description: "–î–æ–±—ã—á–∞ –≥–µ–ª–∏—è-3 –∏–∑ –∞—Ç–º–æ—Å—Ñ–µ—Ä—ã",
            baseCost: 5000,
            cost: 5000,
            multiplier: 2.0,
            owned: false,
            image: "images/jupiter.png"
        },
        {
            id: 3,
            name: "–ê–ª—å—Ñ–∞ –¶–µ–Ω—Ç–∞–≤—Ä–∞",
            description: "–ü–µ—Ä–≤–∞—è –º–µ–∂–∑–≤–µ–∑–¥–Ω–∞—è –∫–æ–ª–æ–Ω–∏—è",
            baseCost: 25000,
            cost: 25000,
            multiplier: 3.0,
            owned: false,
            image: "images/alpha-centauri.png"
        },
        {
            id: 4,
            name: "–ß–µ—Ä–Ω–∞—è –î—ã—Ä–∞",
            description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏",
            baseCost: 100000,
            cost: 100000,
            multiplier: 5.0,
            owned: false,
            image: "images/black-hole.png"
        }
    ],

    megaUpgrades: [
        {
            id: 1,
            name: "–°—Ñ–µ—Ä–∞ –î–∞–π—Å–æ–Ω–∞",
            description: "–ü–æ–ª–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ –∑–≤–µ–∑–¥—ã",
            baseCost: 500000,
            cost: 500000,
            effect: "–£–¥–≤–∞–∏–≤–∞–µ—Ç –¥–æ—Ö–æ–¥ –æ—Ç –≤—Å–µ—Ö —É–ª—É—á—à–µ–Ω–∏–π",
            owned: false,
            image: "images/dyson-sphere.png"
        },
        {
            id: 2,
            name: "–í–∞—Ä–ø-–î–≤–∏–≥–∞—Ç–µ–ª—å",
            description: "–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –º–µ–∂–¥—É –≥–∞–ª–∞–∫—Ç–∏–∫–∞–º–∏",
            baseCost: 2000000,
            cost: 2000000,
            effect: "–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –ø–ª–∞–Ω–µ—Ç –≤ 2 —Ä–∞–∑–∞",
            owned: false,
            image: "images/fleet.png"
        }
    ]
};

// –ö–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
const spaceEvents = [
    {
        name: "–ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å",
        message: "üí´ –ú–µ—Ç–µ–æ—Ä–∏—Ç–Ω—ã–π –¥–æ–∂–¥—å –ø—Ä–∏–Ω–µ—Å —Ä–µ–¥–∫–∏–µ –º–∏–Ω–µ—Ä–∞–ª—ã! –î–æ—Ö–æ–¥ +10% –Ω–∞ 30 —Å–µ–∫—É–Ω–¥!",
        effect: (game) => { game.temporaryMultiplier = 1.1; setTimeout(() => { game.temporaryMultiplier = 1; }, 30000); }
    },
    {
        name: "–°–æ–ª–Ω–µ—á–Ω–∞—è –≤—Å–ø—ã—à–∫–∞",
        message: "‚òÄÔ∏è –°–æ–ª–Ω–µ—á–Ω–∞—è –≤—Å–ø—ã—à–∫–∞ —É–≤–µ–ª–∏—á–∏–ª–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Å–æ–ª–Ω–µ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π! –î–æ—Ö–æ–¥ +25% –Ω–∞ 20 —Å–µ–∫—É–Ω–¥!",
        effect: (game) => { game.temporaryMultiplier = 1.25; setTimeout(() => { game.temporaryMultiplier = 1; }, 20000); }
    },
    {
        name: "–í—Å—Ç—Ä–µ—á–∞ —Å –∏–Ω–æ–ø–ª–∞–Ω–µ—Ç—è–Ω–∞–º–∏",
        message: "üëΩ –ò–Ω–æ–ø–ª–∞–Ω–µ—Ç–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—Ü—ã –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∏ –≤—ã–≥–æ–¥–Ω—É—é —Å–¥–µ–ª–∫—É! +500 –∫—Ä–µ–¥–∏—Ç–æ–≤!",
        effect: (game) => { game.credits += 500; game.totalEarned += 500; }
    },
    {
        name: "–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è",
        message: "üåÄ –ö–æ—Å–º–∏—á–µ—Å–∫–∞—è –∞–Ω–æ–º–∞–ª–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–ª–∞ —Å–∏–ª—É –∫–ª–∏–∫–∞!",
        effect: (game) => { 
            const originalPower = game.clickPower;
            game.clickPower *= 2; 
            setTimeout(() => { game.clickPower = originalPower; }, 15000);
        }
    }
];

// –ü–æ–ª—É—á–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
const creditsElement = document.getElementById('credits');
const passiveIncomeElement = document.getElementById('passiveIncome');
const totalEarnedElement = document.getElementById('totalEarned');
const clickPowerElement = document.getElementById('clickPower');
const clickPowerCostElement = document.getElementById('clickPowerCost');
const planetButton = document.getElementById('planet');
const planetImage = document.getElementById('planetImage');
const upgradesContainer = document.getElementById('upgradesContainer');
const planetsContainer = document.getElementById('planetsContainer');
const megaUpgradesContainer = document.getElementById('megaUpgradesContainer');
const clickPowerBtn = document.getElementById('clickPowerBtn');
const resetBtn = document.getElementById('resetBtn');

// –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è —Å–æ–±—ã—Ç–∏–π
gameState.temporaryMultiplier = 1;

// –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
function updateGameState() {
    calculatePassiveIncome();
    updateDisplay();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (authSystem && authSystem.getCurrentUser()) {
        authSystem.updateUserStats({
            totalEarned: gameState.totalEarned,
            clickPower: gameState.clickPower,
            passiveIncome: gameState.passiveIncome
        });
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É –ª–∏–¥–µ—Ä–æ–≤
        if (typeof leaderboard !== 'undefined') {
            leaderboard.updateLeaderboard();
        }
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
function updateDisplay() {
    creditsElement.textContent = Math.floor(gameState.credits).toLocaleString();
    passiveIncomeElement.textContent = Math.floor(gameState.passiveIncome).toLocaleString();
    totalEarnedElement.textContent = Math.floor(gameState.totalEarned).toLocaleString();
    clickPowerElement.textContent = gameState.clickPower;
    clickPowerCostElement.textContent = gameState.clickPowerCost;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞
function calculatePassiveIncome() {
    let baseIncome = gameState.upgrades.reduce((total, upgrade) => {
        return total + (upgrade.owned * upgrade.income);
    }, 0);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª–∏ –æ—Ç –ø–ª–∞–Ω–µ—Ç
    let multiplier = 1;
    gameState.planets.forEach(planet => {
        if (planet.owned) {
            multiplier *= planet.multiplier;
        }
    });

    // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –º–µ–≥–∞-—É–ª—É—á—à–µ–Ω–∏–π
    if (gameState.megaUpgrades[0].owned) { // –°—Ñ–µ—Ä–∞ –î–∞–π—Å–æ–Ω–∞
        baseIncome *= 2;
    }
    if (gameState.megaUpgrades[1].owned) { // –í–∞—Ä–ø-–î–≤–∏–≥–∞—Ç–µ–ª—å
        multiplier *= 2;
    }

    // –í—Ä–µ–º–µ–Ω–Ω—ã–π –º–Ω–æ–∂–∏—Ç–µ–ª—å –æ—Ç —Å–æ–±—ã—Ç–∏–π
    multiplier *= gameState.temporaryMultiplier;

    gameState.passiveIncome = Math.floor(baseIncome * multiplier);
    return gameState.passiveIncome;
}

// –ü–æ–∫—É–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è
function buyUpgrade(upgradeId) {
    const upgrade = gameState.upgrades.find(u => u.id === upgradeId);
    
    if (gameState.credits >= upgrade.cost) {
        gameState.credits -= upgrade.cost;
        upgrade.owned += 1;
        upgrade.cost = Math.floor(upgrade.cost * 1.15);
        
        updateGameState();
        renderUpgrades();
        achievements.checkAll(gameState);
    }
}

// –ü–æ–∫—É–ø–∫–∞ –ø–ª–∞–Ω–µ—Ç—ã
function buyPlanet(planetId) {
    const planet = gameState.planets.find(p => p.id === planetId);
    
    if (!planet.owned && gameState.credits >= planet.cost) {
        gameState.credits -= planet.cost;
        planet.owned = true;
        // –ú–µ–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –ø–ª–∞–Ω–µ—Ç—ã
        if (planetId === 1) planetImage.src = planet.image;
        
        updateGameState();
        renderPlanets();
        achievements.checkAll(gameState);
    }
}

// –ü–æ–∫—É–ø–∫–∞ –º–µ–≥–∞-—É–ª—É—á—à–µ–Ω–∏—è
function buyMegaUpgrade(megaUpgradeId) {
    const megaUpgrade = gameState.megaUpgrades.find(m => m.id === megaUpgradeId);
    
    if (!megaUpgrade.owned && gameState.credits >= megaUpgrade.cost) {
        gameState.credits -= megaUpgrade.cost;
        megaUpgrade.owned = true;
        
        updateGameState();
        renderMegaUpgrades();
        achievements.checkAll(gameState);
    }
}

// –£—Å–∏–ª–µ–Ω–∏–µ –∫–ª–∏–∫–∞
function buyClickPower() {
    if (gameState.credits >= gameState.clickPowerCost) {
        gameState.credits -= gameState.clickPowerCost;
        gameState.clickPower += 1;
        gameState.clickPowerCost = Math.floor(gameState.clickPowerCost * 1.5);
        
        updateGameState();
        achievements.checkAll(gameState);
    }
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–ª—É—á—à–µ–Ω–∏–π
function renderUpgrades() {
    upgradesContainer.innerHTML = '';
    
    gameState.upgrades.forEach(upgrade => {
        const upgradeElement = document.createElement('div');
        upgradeElement.className = 'upgrade-item';
        
        upgradeElement.innerHTML = `
            <img src="${upgrade.image}" alt="${upgrade.name}" onerror="this.style.display='none'">
            <div class="upgrade-info">
                <div class="upgrade-name">${upgrade.name} (${upgrade.owned})</div>
                <div class="upgrade-desc">${upgrade.description}</div>
                <div class="upgrade-stats">–î–æ—Ö–æ–¥: ${upgrade.income}/—Å–µ–∫</div>
            </div>
            <button onclick="buyUpgrade(${upgrade.id})" ${gameState.credits < upgrade.cost ? 'disabled' : ''}>
                ${Math.floor(upgrade.cost)} ü™ô
            </button>
        `;
        
        upgradesContainer.appendChild(upgradeElement);
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ø–ª–∞–Ω–µ—Ç
function renderPlanets() {
    planetsContainer.innerHTML = '';
    
    gameState.planets.forEach(planet => {
        const planetElement = document.createElement('div');
        planetElement.className = 'planet-item';
        
        if (planet.owned) {
            planetElement.innerHTML = `
                <img src="${planet.image}" alt="${planet.name}" onerror="this.style.display='none'">
                <div class="planet-info">
                    <div class="planet-name">${planet.name} ‚úÖ</div>
                    <div class="planet-desc">${planet.description}</div>
                    <div class="planet-stats">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó${planet.multiplier}</div>
                </div>
                <button disabled>
                    –ö–æ–ª–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!
                </button>
            `;
        } else {
            planetElement.innerHTML = `
                <img src="${planet.image}" alt="${planet.name}" onerror="this.style.display='none'">
                <div class="planet-info">
                    <div class="planet-name">${planet.name}</div>
                    <div class="planet-desc">${planet.description}</div>
                    <div class="planet-stats">–ú–Ω–æ–∂–∏—Ç–µ–ª—å: √ó${planet.multiplier}</div>
                </div>
                <button onclick="buyPlanet(${planet.id})" ${gameState.credits < planet.cost ? 'disabled' : ''}>
                    ${planet.cost} ü™ô
                </button>
            `;
        }
        
        planetsContainer.appendChild(planetElement);
    });
}

// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–µ–≥–∞-—É–ª—É—á—à–µ–Ω–∏–π
function renderMegaUpgrades() {
    megaUpgradesContainer.innerHTML = '';
    
    gameState.megaUpgrades.forEach(megaUpgrade => {
        const megaElement = document.createElement('div');
        megaElement.className = 'mega-upgrade-item';
        
        if (megaUpgrade.owned) {
            megaElement.innerHTML = `
                <img src="${megaUpgrade.image}" alt="${megaUpgrade.name}" onerror="this.style.display='none'">
                <div class="mega-upgrade-info">
                    <div class="mega-upgrade-name">${megaUpgrade.name} ‚úÖ</div>
                    <div class="mega-upgrade-desc">${megaUpgrade.description}</div>
                    <div class="mega-upgrade-stats">–≠—Ñ—Ñ–µ–∫—Ç: ${megaUpgrade.effect}</div>
                </div>
                <button disabled>
                    –ü—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–æ!
                </button>
            `;
        } else {
            megaElement.innerHTML = `
                <img src="${megaUpgrade.image}" alt="${megaUpgrade.name}" onerror="this.style.display='none'">
                <div class="mega-upgrade-info">
                    <div class="mega-upgrade-name">${megaUpgrade.name}</div>
                    <div class="mega-upgrade-desc">${megaUpgrade.description}</div>
                    <div class="mega-upgrade-stats">–≠—Ñ—Ñ–µ–∫—Ç: ${megaUpgrade.effect}</div>
                </div>
                <button onclick="buyMegaUpgrade(${megaUpgrade.id})" ${gameState.credits < megaUpgrade.cost ? 'disabled' : ''}>
                    ${megaUpgrade.cost} ü™ô
                </button>
            `;
        }
        
        megaUpgradesContainer.appendChild(megaElement);
    });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –ø–ª–∞–Ω–µ—Ç–µ
planetButton.addEventListener('click', () => {
    const earnings = gameState.clickPower;
    gameState.credits += earnings;
    gameState.totalEarned += earnings;
    updateGameState();
    
    // –ê–Ω–∏–º–∞—Ü–∏—è –∫–ª–∏–∫–∞
    planetImage.classList.add('pulse');
    setTimeout(() => planetImage.classList.remove('pulse'), 300);
    
    achievements.checkAll(gameState);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —É—Å–∏–ª–µ–Ω–∏—è –∫–ª–∏–∫–∞
clickPowerBtn.addEventListener('click', buyClickPower);

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Å–±—Ä–æ—Å–∞
resetBtn.addEventListener('click', resetGame);

// –°–ª—É—á–∞–π–Ω—ã–µ –∫–æ—Å–º–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
function triggerRandomEvent() {
    const now = Date.now();
    if (now - gameState.lastEventTime > gameState.eventCooldown) {
        const event = spaceEvents[Math.floor(Math.random() * spaceEvents.length)];
        const eventPanel = document.getElementById('eventMessage');
        
        if (eventPanel) {
            eventPanel.innerHTML = event.message;
            eventPanel.classList.add('bounce');
            
            // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç —Å–æ–±—ã—Ç–∏—è
            event.effect(gameState);
            updateGameState();
            
            // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            setTimeout(() => {
                eventPanel.classList.remove('bounce');
            }, 3000);
            
            gameState.lastEventTime = now;
        }
    }
}

// –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
setInterval(() => {
    // –ü–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
    const income = gameState.passiveIncome / 10; // –ù–∞—á–∏—Å–ª—è–µ–º –∫–∞–∂–¥—ã–µ 0.1 —Å–µ–∫—É–Ω–¥—ã
    gameState.credits += income;
    gameState.totalEarned += income;
    updateGameState();
    
    // –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (—à–∞–Ω—Å 1% –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
    if (Math.random() < 0.01) {
        triggerRandomEvent();
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievements.checkAll(gameState);
}, 100);

// –°–±—Ä–æ—Å –∏–≥—Ä—ã
function resetGame() {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ? –í—Å–µ –≤–∞—à–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å –±—É–¥–µ—Ç –ø–æ—Ç–µ—Ä—è–Ω!')) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        gameState.credits = 0;
        gameState.totalEarned = 0;
        gameState.passiveIncome = 0;
        gameState.clickPower = 1;
        gameState.clickPowerCost = 10;
        gameState.temporaryMultiplier = 1;
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        gameState.upgrades.forEach(upgrade => {
            upgrade.owned = 0;
            upgrade.cost = upgrade.baseCost;
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã
        gameState.planets.forEach(planet => {
            planet.owned = false;
        });
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –º–µ–≥–∞-—É–ª—É—á—à–µ–Ω–∏—è
        gameState.megaUpgrades.forEach(megaUpgrade => {
            megaUpgrade.owned = false;
        });
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ó–µ–º–ª–∏
        planetImage.src = 'images/earth.png';
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateGameState();
        renderUpgrades();
        renderPlanets();
        renderMegaUpgrades();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–±—Ä–æ—à–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        saveGame();
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–≥—Ä—ã
function initGame() {
    updateDisplay();
    renderUpgrades();
    renderPlanets();
    renderMegaUpgrades();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    const savedGame = localStorage.getItem('spaceMagnateSave');
    if (savedGame) {
        const loadedState = JSON.parse(savedGame);
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        gameState.credits = loadedState.credits || 0;
        gameState.totalEarned = loadedState.totalEarned || 0;
        gameState.clickPower = loadedState.clickPower || 1;
        gameState.clickPowerCost = loadedState.clickPowerCost || 10;
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É–ª—É—á—à–µ–Ω–∏—è
        if (loadedState.upgrades) {
            loadedState.upgrades.forEach(loadedUpgrade => {
                const upgrade = gameState.upgrades.find(u => u.id === loadedUpgrade.id);
                if (upgrade) {
                    upgrade.owned = loadedUpgrade.owned || 0;
                    upgrade.cost = loadedUpgrade.cost || upgrade.baseCost;
                }
            });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–µ—Ç—ã
        if (loadedState.planets) {
            loadedState.planets.forEach(loadedPlanet => {
                const planet = gameState.planets.find(p => p.id === loadedPlanet.id);
                if (planet) {
                    planet.owned = loadedPlanet.owned || false;
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –µ—Å–ª–∏ –ú–∞—Ä—Å –∫–æ–ª–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω
                    if (planet.id === 1 && planet.owned) {
                        planetImage.src = planet.image;
                    }
                }
            });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–µ–≥–∞-—É–ª—É—á—à–µ–Ω–∏—è
        if (loadedState.megaUpgrades) {
            loadedState.megaUpgrades.forEach(loadedMega => {
                const megaUpgrade = gameState.megaUpgrades.find(m => m.id === loadedMega.id);
                if (megaUpgrade) {
                    megaUpgrade.owned = loadedMega.owned || false;
                }
            });
        }
        
        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        if (loadedState.achievements) {
            achievements.load(loadedState.achievements);
        }
        
        calculatePassiveIncome();
        updateGameState();
        renderUpgrades();
        renderPlanets();
        renderMegaUpgrades();
        achievements.updateDisplay();
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    achievements.checkAll(gameState);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–≥—Ä—ã
function saveGame() {
    const saveData = {
        credits: gameState.credits,
        totalEarned: gameState.totalEarned,
        clickPower: gameState.clickPower,
        clickPowerCost: gameState.clickPowerCost,
        upgrades: gameState.upgrades.map(u => ({
            id: u.id,
            owned: u.owned,
            cost: u.cost
        })),
        planets: gameState.planets.map(p => ({
            id: p.id,
            owned: p.owned
        })),
        megaUpgrades: gameState.megaUpgrades.map(m => ({
            id: m.id,
            owned: m.owned
        })),
        achievements: achievements.getSaveData()
    };
    
    localStorage.setItem('spaceMagnateSave', JSON.stringify(saveData));
}

// –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(saveGame, 10000);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
window.addEventListener('load', initGame);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–≥—Ä—É –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', saveGame);